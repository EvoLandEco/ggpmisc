ggplot(my.data, aes(x, y, colour = group)) + geom_point() +
stat_debug_group()
library(ggpmisc)
install.packages(c("BH", "ggspectra", "photobiology", "photobiologyAll", "photobiologyInOut", "photobiologyLamps", "photobiologyPlants", "rcdd", "RcppArmadillo", "rmarkdown", "rOmniDriver", "rsconnect", "zoo"))
install.packages("survival", lib="C:/Program Files/R/R-3.2.5/library")
install.packages(c("BH", "ggspectra", "photobiology", "photobiologyAll",
install.packages(c("BH", "rcdd", "RcppArmadillo", "rmarkdown", "rsconnect", "zoo"))
install.packages("survival", lib="C:/Program Files/R/R-3.2.5/library")
install.packages(c("BH", "rcdd", "RcppArmadillo", "rmarkdown",
library(ggplot2)
library(ggpmisc)
library(xts)
library(lubridate)
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x,
y,
group = c("A", "B"),
y2 = y * c(0.5,2),
block = c("a", "a", "b", "b"))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
library(nlme)
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "gls",
method.args = list(model = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula, random = ~ 1))
my.data
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula, random = ~ 1 | color))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula, random = ~ 1 | group))
install.packages("git2r")
install.packages("fitdistrplus")
install.packages("git2r")
install.packages("survival", lib="C:/Program Files/R/R-3.3.0/library")
install.packages("patchDVI")
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
library(ggpmisc)
# generate artificial data
set.seed(4321)
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x,
y,
group = c("A", "B"),
y2 = y * c(0.5,2),
block = c("a", "a", "b", "b"))
str(my.data)
# plot
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~"))
, data        = NULL
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "hat(Y)~`=`~"
, eq.x.rhs    = "X"
, label.x     = 0
, label.y     = 2e6
, vjust       = c(1.2, 0)
, position    = "identity"
, na.rm       = FALSE
, show.legend = FALSE
, inherit.aes = TRUE
, parse       = TRUE
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE))
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~"))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "hat(Y)~`=`~"
, eq.x.rhs    = "X"
, label.x     = 0
, label.y     = 2e6
, vjust       = c(1.2, 0)
, position    = "identity"
, na.rm       = FALSE
, show.legend = FALSE
, inherit.aes = TRUE
, parse       = TRUE
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~"))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "hat(Y)~`=`~"
, eq.x.rhs    = "X"
, label.x     = 0
, label.y     = 2e6
, position    = "identity"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~"))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "hat(Y)~`=`~"
, eq.x.rhs    = "X"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\ \ \ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\hat{Y} = "
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\ \ \ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\hat{Y} = "
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
) +
theme_bw()
BIC.label = paste("BIC", BIC.char, sep = " = "))
library(ggpmisc)
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
library(ggpmisc)
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
library(ggpmisc)
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
library(ggpmisc)
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, eq.x.rhs = " x",
, output.type = "LaTeX"
) +
theme_bw()
library(ggpmisc)
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, eq.x.rhs = " x",
, output.type = "LaTeX"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste(..eq.label.., ..rr.label.., sep = "\\ \\ \\ "))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste("$", ..eq.label.., "\\ \\ \\ ", ..rr.label.., "$", sep = ""))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
ggplot(data = my.data, mapping=aes(x = x, y = y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", se =  FALSE, formula = y ~ poly(x=x, degree = 2, raw = TRUE)) +
stat_poly_eq(
mapping     = aes(label = paste("$", ..eq.label.., "$\\ \\ \\ $", ..rr.label.., "$", sep = ""))
, geom        = "text"
, formula     = y ~ poly(x, 2, raw = TRUE)
, eq.with.lhs = "\\hat{Y} = "
, output.type = "LaTeX"
) +
theme_bw()
install.packages("tikzDevice")
library(ggpmisc)
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
geom = "debug",
summary.fun = dplyr::data_frame,
library(ggpmisc)
library(ggplot2)
library(xts)
library(lubridate)
library(tibble)
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x,
y,
group = c("A", "B"),
y2 = y * c(0.5,2),
block = c("a", "a", "b", "b"))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
geom = "debug",
summary.fun = dplyr::data_frame,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))+
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
geom = "debug",
summary.fun = dplyr::data_frame,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula)),
geom = "debug",
summary.fun = dplyr::data_frame,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = dplyr::data_frame,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = tibble::data_frame,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = as_data_frame,
summary.fun.args = list(),
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = as_data_frame,
summary.fun.args = list()) +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
library(ggpmisc)
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug") +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
library(ggpmisc)
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = tibble::as_data_frame,
summary.fun.args = list()) +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
library(ggpmisc)
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = tibble::as_data_frame,
summary.fun.args = list()) +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
formula <- y ~ x
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = tibble::as_data_frame,
summary.fun.args = list()) +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
library(ggpmisc)
formula <- y ~ x
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = tibble::as_data_frame,
summary.fun.args = list()) +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
library(ggpmisc)
formula <- y ~ x
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = tibble::as_data_frame,
summary.fun.args = list()) +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ...fitted..,
ymax = ...fitted.. + ...se.fit.. * 2,
ymin = ...fitted.. - ...se.fit.. * 2))
