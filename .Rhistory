formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes = aes(y = ...std.resid..))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes = aes(y = ...std.resid..))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
library(ggpmisc)
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
library(ggpmisc)
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes = aes(y = ...std.resid..))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
mapping = aes(y = ...std.resid..))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
... = list(aes = aes(y = ...std.resid..)))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "line",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
geom = "smooth",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
#  geom_point() +
stat_fit_augment(method = "lm",
geom = "smooth",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y = ...std.resid.., color = group)) +
#  geom_point() +
stat_fit_augment(method = "lm",
geom = "smooth",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
#  geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes(y = ...std.resid..))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
#  geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes(y = ...std.resid.., x = ..x..))
library(ggpmisc)
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
#  geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes(y = ...std.resid..))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
#  geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes(y = ..y.observed..))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
#  geom_point() +
stat_fit_augment(method = "lm",
geom = "point",
method.args = list(formula = formula),
aes(y = ..y.observed.., x = ..x..))
library(ggpmisc)
install.packages(c("BH", "fields", "limma", "RcppArmadillo"))
install.packages("survival", lib="C:/Program Files/R/R-3.3.0/library")
library(ggpmisc)
library(ggplot2)
library(ggpmisc)
library(xts)
library(lubridate)
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x,
y,
group = c("A", "B"),
y2 = y * c(0.5,2),
block = c("a", "a", "b", "b"))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = signif(..p.value.., digits = 4)))
library(ggpmisc)
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = signif(..p.value.., digits = 4)))
library(ggpmisc)
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = signif(..p.value.., digits = 4)))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = paste("P-value = ", signif(..p.value.., digits = 4), sep = "")))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
label.x = "right",
label.y = "bottom",
geom = "text",
aes(label = paste("P-value = ", signif(..p.value.., digits = 4), sep = "")))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
label.x.npc = "right",
label.y.npc = "bottom",
geom = "text",
aes(label = paste("P-value = ", signif(..p.value.., digits = 4), sep = "")))
library(ggpmisc)
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x,
y,
group = c("A", "B"),
y2 = y * c(0.5,2),
block = c("a", "a", "b", "b"))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(formula = formula, parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..adj.rr.label..), formula = formula,
parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..AIC.label..),
formula = formula,
parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..), formula = formula,
parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label =  paste(..eq.label.., ..adj.rr.label.., sep = "~~~~")),
formula = formula, parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = paste("atop(", ..AIC.label.., ",", ..BIC.label.., ")", sep = "")),
formula = formula,
parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..),
eq.with.lhs = FALSE,
formula = formula, parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..),
eq.with.lhs = "italic(hat(y))~`=`~",
formula = formula, parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
labs(x = expression(italic(z)), y = expression(italic(h)) ) +
stat_poly_eq(aes(label = ..eq.label..),
eq.with.lhs = "italic(h)~`=`~",
eq.x.rhs = "~italic(z)",
formula = formula, parse = TRUE)
formula <- y ~ poly(x, 2, raw = TRUE)
ggplot(my.data, aes(x, log10(y + 1e6))) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..),
eq.with.lhs = "plain(log)[10](italic(y)+10^6)~`=`~",
formula = formula, parse = TRUE)
formula <- y ~ poly(x, 5, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..), formula = formula, parse = TRUE)
formula <- y ~ x + I(x^2) + I(x^3) - 1
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..), formula = formula,
parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..), size = rel(3),
formula = formula, parse = TRUE) +
facet_wrap(~group)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..), size = rel(3),
formula = formula, parse = TRUE) +
facet_wrap(~group, scales = "free_y")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..),
formula = formula, parse = TRUE) +
theme_bw()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..),
formula = formula, parse = TRUE, label.y.npc = "center") +
theme_bw()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..),
formula = formula, parse = TRUE, label.y.npc = 0.75) +
theme_bw()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, fill = block)) +
geom_point(shape = 21, size = rel(3)) +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..rr.label..), size = rel(3),
geom = "label", alpha = 0.33,
formula = formula, parse = TRUE) +
facet_wrap(~group, scales = "free_y") +
theme_bw()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, colour = group, fill = block)) +
geom_point(shape = 21, size = rel(3)) +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..rr.label..), size = rel(3),
geom = "label", alpha = 0.2,
formula = formula, parse = TRUE,
label.y = 0.66) +
facet_wrap(~group, scales = "free_y") +
theme_bw()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, colour = group, fill = block)) +
geom_point(shape = 21, size = rel(3)) +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..rr.label..), size = rel(3),
geom = "label", alpha = 0.2,
formula = formula, parse = TRUE,
label.y.npc = 0.66) +
facet_wrap(~group, scales = "free_y") +
theme_bw()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yintercept = 0, linetype = "dashed") +
stat_fit_residuals(formula = formula)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_deviations(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_deviations(formula = formula, color = "red",
arrow = arrow(length = unit(0.015, "npc"),
ends = "both")) +
geom_point()
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = signif(..p.value.., digits = 4)))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = paste("P-value = ", signif(..p.value.., digits = 4), sep = "")))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
label.x.npc = "right",
label.y.npc = "bottom",
geom = "text",
aes(label = paste("P-value = ", signif(..p.value.., digits = 4), sep = "")))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
label.x.npc = "right",
label.y.npc = "bottom",
geom = "text",
aes(label = paste("P-value = ", signif(..p.value.., digits = 4), sep = "")))
# formula <- y ~ poly(x, 3, raw = TRUE)
# broom::augment does not handle poly correctly!
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
ggplot(my.data, aes(x, y)) + stat_debug_group()
ggplot(my.data, aes(x, y)) + geom_point() + stat_debug_group()
ggplot(my.data, aes(x, y)) + geom_point() + stat_debug_panel()
ggplot(my.data, aes(x, y, colour = group)) + geom_point() +
stat_debug_group()
library(ggpmisc)
install.packages(c("BH", "ggspectra", "photobiology", "photobiologyAll", "photobiologyInOut", "photobiologyLamps", "photobiologyPlants", "rcdd", "RcppArmadillo", "rmarkdown", "rOmniDriver", "rsconnect", "zoo"))
install.packages("survival", lib="C:/Program Files/R/R-3.2.5/library")
install.packages(c("BH", "ggspectra", "photobiology", "photobiologyAll",
install.packages(c("BH", "rcdd", "RcppArmadillo", "rmarkdown", "rsconnect", "zoo"))
install.packages("survival", lib="C:/Program Files/R/R-3.2.5/library")
install.packages(c("BH", "rcdd", "RcppArmadillo", "rmarkdown",
library(ggplot2)
library(ggpmisc)
library(xts)
library(lubridate)
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x,
y,
group = c("A", "B"),
y2 = y * c(0.5,2),
block = c("a", "a", "b", "b"))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula))
library(nlme)
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "gls",
method.args = list(model = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula, random = ~ 1))
my.data
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula, random = ~ 1 | color))
formula <- y ~ x + I(x^2) + I(x^3)
ggplot(my.data, aes(x, y, color = group)) +
geom_point() +
stat_fit_augment(method = "lme",
method.args = list(fixed = formula, random = ~ 1 | group))
install.packages("git2r")
install.packages("fitdistrplus")
install.packages("git2r")
install.packages("survival", lib="C:/Program Files/R/R-3.3.0/library")
