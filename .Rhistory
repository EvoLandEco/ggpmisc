ggplot(my.data, aes(x, y)) +
stat_fit_residuals(geom = "point", formula = formula,
aes(x = ..x.fitted.., y = ..y.fitted..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.03, "npc"))) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.01, "npc"))) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.015, "npc"), code = 3)) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.015, "npc"), ends = "both")) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.015, "npc"),
ends = "both", type = "closed")) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.01, "npc"),
ends = "both", type = "closed")) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.015, "npc"),
ends = "both")) +
geom_point()
library(ggpmisc)
library(ggplot2)
library(ggpmisc)
library(xts)
library(lubridate)
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x,
y,
group = c("A", "B"),
y2 = y * c(0.5,2),
block = c("a", "a", "b", "b"))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red") +
geom_point()
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red",
arrow = arrow(length = unit(0.015, "npc"),
ends = "both")) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red", geom = "debug") +
geom_point()
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_residuals(formula = formula, color = "red", geom = "debug")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
geom_debug() +
stat_fit_residuals(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
geom_debug() +
stat_fit_residuals(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
geom_debug(summary.fun = head) +
stat_fit_residuals(formula = formula, color = "red") +
geom_point()
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
geom_debug(summary.fun = head) +
stat_fit_residuals(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_deviations(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_deviations(formula = formula, color = "red",
arrow = arrow(length = unit(0.015, "npc"),
ends = "both")) +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_smooth(method = "lm", formula = formula) +
stat_fit_deviations(formula = formula, color = "red") +
geom_point()
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, color = "red")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula)
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yíntercept = 0, line_type = "dashed") +
stat_fit_residuals(formula = formula)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yíntercept = 0, linetype = "dashed") +
stat_fit_residuals(formula = formula)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yintercept = 0, linetype = "dashed") +
stat_fit_residuals(formula = formula)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yintercept = 0, linetype = "dashed") +
stat_fit_residuals(formula = formula, resid.type = "deviance")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yintercept = 0, linetype = "dashed") +
stat_fit_residuals(formula = formula, resid.type = "working") +
stat_fit_residuals(formula = formula, resid.type = "deviance", color = "red")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yintercept = 0, linetype = "dashed") +
stat_fit_residuals(formula = formula, resid.type = "working") +
stat_fit_residuals(formula = formula, resid.type = "response", color = "red")
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_hline(yintercept = 0, linetype = "dashed") +
stat_fit_residuals(formula = formula, resid.type = "working") +
stat_fit_residuals(formula = formula, resid.type = "response", color = "red")
mf1 <- lm(formula, my.data, aes(x, y))
mf1 <- lm(formula, my.data)
head(residuals(mf1))
head(residuals(mf1, type = "deviance"))
head(residuals(mf1, type = "pearson"))
head(residuals(mf1, type = "working"))
head(residuals(mf1, type = "response"))
head(residuals(mf1, type = "partial"))
residuals(mf1, type = "partial")
utils::data(anorexia, package = "MASS")
anorexia
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, geom = "debug")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, geom = "debug")
library(ggpmisc)
ggplot(my.data, aes(x, y, colour = group)) + geom_point() +
stat_peaks(span = NULL,
geom = "debug",
summary.fun = function(x) {x},
summary.fun.args = list())
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula, geom = "debug")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula,
geom = "debug",
summary.fun = dplyr::as_data_frame)
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula,
geom = "debug",
summary.fun = head)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula,
geom = "debug",
summary.fun = head,
summary.fun.args = list())
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula,
geom = "debug",
summary.fun = dplyr::as_data_frame,
summary.fun.args = list())
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
stat_fit_residuals(formula = formula,
geom = "debug",
summary.fun = dplyr::as_data_frame,
summary.fun.args = list())
library("broom", lib.loc="~/R/win-library/3.3")
augment(mf1)
broom(mf1)
confint_tidy(mf1)
glance(mf1)
tidy(mf1)
class(glance(mf1))
library(ggpmisc)
m <- "lm"
quote(m)
library(ggpmisc)
augment(mf1)
names(augment(mf1))
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", method.args = list(formula = formula)) +
stat_poly_eq(formula = formula, parse = TRUE)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = text,
aes(label = signif(..p.value.., digits = 3)))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "point")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = "p.value"))
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = ..p.value..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_fit_glance(method = "lm",
method.args = list(formula = formula),
geom = "text",
aes(label = signif(..p.value.., digits = 4)))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "point")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(ymax = ...fitted.. + ...se.fit..,
ymin = ...fitted.. - ...se.fit..,
y = ....fitted..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(ymax = ...fitted.. + ...se.fit..,
ymin = ...fitted.. - ...se.fit..,
y = ...fitted..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(ymax = ..fitted.. + ...se.fit..,
ymin = ..fitted.. - ...se.fit..,
y = ..fitted..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(ymax = ..'.fitted'.. + ..'.se.fit'..,
ymin = ..'.fitted'.. - ..'.se.fit'..,
y = ..'.fitted'..))
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(ymax = ..fitted.. + ..se.fit..,
ymin = ..fitted.. - ..se.fit..,
y = ..fitted..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head)
,
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head,
summary.fun.args = list())
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head,
summary.fun.args = list())
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head,
summary.fun.args = list())
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head,
summary.fun.args = list())
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "debug",
summary.fun = head,
summary.fun.args = list())
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(ymax = ..fitted.. + ..se.fit..,
ymin = ..fitted.. - ..se.fit..))
ggplot(my.data, aes(x, y, colour = group)) + geom_point() +
stat_smooth(method = "lm",
geom = "debug",
summary.fun = function(x) {x},
summary.fun.args = list())
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "point",
aes(y = ..fitted..))
library(ggpmisc)
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "point",
aes(y = ..fitted..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "line",
aes(y = ..fitted..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "line")
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(x = ..x..,
y = ..fitted..,
ymax = ..fitted.. + ..se.fit..,
ymin = ..fitted.. - ..se.fit..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ..fitted..,
ymax = ..fitted.. + ..se.fit..,
ymin = ..fitted.. - ..se.fit..))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y)) +
geom_point() +
stat_fit_augment(method = "lm",
method.args = list(formula = formula),
geom = "smooth",
aes(y = ..fitted..,
ymax = ..fitted.. + ..se.fit.. * 2,
ymin = ..fitted.. - ..se.fit.. * 2))
library(ggpmisc)
